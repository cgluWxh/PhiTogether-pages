const _=`
	attribute vec2 a_position;
	attribute vec2 a_texCoord;
	varying vec2 v_texCoord;
	void main() {
		gl_Position = vec4(a_position, 0, 1);
		v_texCoord = a_texCoord;
	}
`;class f{constructor(i){this.fsSource=i;const r=document.createElement("canvas"),e=r.getContext("webgl2")||r.getContext("webgl")||r.getContext("experimental-webgl"),t=e.createProgram(),s=e.createShader(e.VERTEX_SHADER);e.shaderSource(s,_),e.compileShader(s),e.attachShader(t,s);const a=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(a,i),e.compileShader(a),!e.getShaderParameter(a,e.COMPILE_STATUS))throw new SyntaxError(e.getShaderInfoLog(a));e.attachShader(t,a),e.linkProgram(t),e.useProgram(t);const c=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,c),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,1,1,1,1,-1,-1,-1]),e.STATIC_DRAW);const o=e.getAttribLocation(t,"a_position");e.enableVertexAttribArray(o),e.vertexAttribPointer(o,2,e.FLOAT,!1,0,0);const n=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,n),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,1,1,0,1]),e.STATIC_DRAW);const T=e.getAttribLocation(t,"a_texCoord");e.enableVertexAttribArray(T),e.vertexAttribPointer(T,2,e.FLOAT,!1,0,0);const E=e.createTexture();e.bindTexture(e.TEXTURE_2D,E),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE);const A=e.getUniformLocation(t,"u_image");e.uniform1i(A,1),e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,E),this.canvas=r,this.gl=e,this.program=t}apply(i){const r=this.gl,e=this.canvas;return e.width=i.width,e.height=i.height,r.viewport(0,0,e.width,e.height),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,i),e}getImage(i,r,e={}){const{gl:t}=this,s=t.getProgramParameter(this.program,t.ACTIVE_UNIFORMS);for(let a=0;a<s;a++){const{type:c,name:o}=t.getActiveUniform(this.program,a),n=t.getUniformLocation(this.program,o);switch(o){case"u_name":t.uniform1f(n,i);break;case"u_now":t.uniform1f(n,r);break;case"u_aspect":t.uniform1f(n,this.canvas.width/this.canvas.height);break;default:if(c===t.FLOAT&&e[o]!==void 0&&t.uniform1f(n,e[o]),c===t.SAMPLER_2D){const T=this.program.uniforms[o];t.useProgram(this.program),t.activeTexture(t[`TEXTURE${T}`]),t.uniform1i(n,T)}else c===t.FLOAT_MAT4&&(this[o]=n)}}return t.drawArrays(t.TRIANGLE_FAN,0,4),this.canvas}}export{f as default};
