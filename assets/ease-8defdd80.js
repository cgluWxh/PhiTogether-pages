const r=[t=>t,t=>1-Math.cos(t*Math.PI/2),t=>Math.sin(t*Math.PI/2),t=>(1-Math.cos(t*Math.PI))/2,t=>t**2,t=>1-(t-1)**2,t=>((t*=2)<1?t**2:-((t-2)**2-2))/2,t=>t**3,t=>1+(t-1)**3,t=>((t*=2)<1?t**3:(t-2)**3+2)/2,t=>t**4,t=>1-(t-1)**4,t=>((t*=2)<1?t**4:-((t-2)**4-2))/2,()=>0,()=>1,(t,n)=>{let o=0;for(;o<n.length&&t>n[o].time;)o++;if(o===0)return n[0].value;if(o===n.length)return n[n.length-1].value;const l=n[o-1].time,c=n[o-1].value,h=n[o].time,u=n[o].value,v=c+n[o-1].outWeight*(u-c)*n[o-1].outSlope,p=u-n[o].inWeight*(u-c)*n[o].inSlope,i=(t-l)/(h-l),a=i*i,M=a*i,g=1-i,e=g*g;return e*g*c+3*e*i*v+3*g*a*p+M*u}];function I(t,n,o=0){if(!t||!t.length)return o;let l=0;for(;l<t.length&&n>t[l].time;)l++;if(l===0)return t[0].value;if(l===t.length)return t[t.length-1].value;const{time:c,value:h}=t[l-1],{time:u,value:v}=t[l],p=(n-c)/(u-c),i=r[t[l-1].easeType];return h+(v-h)*i(p,t[l-1].animationCurve)}export{I as g};
